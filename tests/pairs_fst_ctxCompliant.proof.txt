{ true } Type { true /\ Inductive(T, int, []) /\ Inductive(T, times, [1; 2]) } 

  preconditions  Value { true /\ Inductive(T, int, []) /\ Inductive(T, times, [1; 2]) /\ Inductive(V, num, []) /\ Inductive(V, pair, []) } 

  preconditions  Context { true /\ Inductive(T, int, []) /\ Inductive(T, times, [1; 2]) /\ Inductive(V, num, []) /\ Inductive(V, pair, []) /\ Inductive(C, fst, [1]) /\ Inductive(C, snd, [1]) } 

  preconditions  Context { true /\ Inductive(T, int, []) /\ Inductive(T, times, [1; 2]) /\ Inductive(V, num, []) /\ Inductive(V, pair, []) /\ Inductive(C, fst, [1]) /\ Inductive(C, snd, [1]) /\ Inductive(C, num, []) /\ Inductive(C, pair, []) } 

 
---- (ITERATE)
 preconditions  T-INT { ContraResp(T-INT, arrow) /\ true /\ Inductive(T, int, []) /\ Inductive(T, times, [1; 2]) /\ Inductive(V, num, []) /\ Inductive(V, pair, []) /\ Inductive(C, fst, [1]) /\ Inductive(C, snd, [1]) /\ Inductive(C, num, []) /\ Inductive(C, pair, []) } 

 
---- (ITERATE)
 preconditions  T-PAIR { ContraResp(T-PAIR, arrow) /\ ContraResp(T-INT, arrow) /\ true /\ Inductive(T, int, []) /\ Inductive(T, times, [1; 2]) /\ Inductive(V, num, []) /\ Inductive(V, pair, []) /\ Inductive(C, fst, [1]) /\ Inductive(C, snd, [1]) /\ Inductive(C, num, []) /\ Inductive(C, pair, []) } 

 
---- (ITERATE)
 preconditions  T-FST { ContraResp(T-FST, arrow) /\ ContraResp(T-PAIR, arrow) /\ ContraResp(T-INT, arrow) /\ true /\ Inductive(T, int, []) /\ Inductive(T, times, [1; 2]) /\ Inductive(V, num, []) /\ Inductive(V, pair, []) /\ Inductive(C, fst, [1]) /\ Inductive(C, snd, [1]) /\ Inductive(C, num, []) /\ Inductive(C, pair, []) } 

 
---- (ITERATE)
 preconditions  T-SND { ContraResp(T-SND, arrow) /\ ContraResp(T-FST, arrow) /\ ContraResp(T-PAIR, arrow) /\ ContraResp(T-INT, arrow) /\ true /\ Inductive(T, int, []) /\ Inductive(T, times, [1; 2]) /\ Inductive(V, num, []) /\ Inductive(V, pair, []) /\ Inductive(C, fst, [1]) /\ Inductive(C, snd, [1]) /\ Inductive(C, num, []) /\ Inductive(C, pair, []) } 

 
---- (ITERATE)
 preconditions  R-FST { CtxCompliant(R-FST) /\ ContraResp(T-SND, arrow) /\ ContraResp(T-FST, arrow) /\ ContraResp(T-PAIR, arrow) /\ ContraResp(T-INT, arrow) /\ true /\ Inductive(T, int, []) /\ Inductive(T, times, [1; 2]) /\ Inductive(V, num, []) /\ Inductive(V, pair, []) /\ Inductive(C, fst, [1]) /\ Inductive(C, snd, [1]) /\ Inductive(C, num, []) /\ Inductive(C, pair, []) } 

 
---- (ITERATE)
 preconditions  R-SND { CtxCompliant(R-SND) /\ CtxCompliant(R-FST) /\ ContraResp(T-SND, arrow) /\ ContraResp(T-FST, arrow) /\ ContraResp(T-PAIR, arrow) /\ ContraResp(T-INT, arrow) /\ true /\ Inductive(T, int, []) /\ Inductive(T, times, [1; 2]) /\ Inductive(V, num, []) /\ Inductive(V, pair, []) /\ Inductive(C, fst, [1]) /\ Inductive(C, snd, [1]) /\ Inductive(C, num, []) /\ Inductive(C, pair, []) }
---- (LAN)
{ true } (G,I) { CtxCompliant(R-SND) /\ CtxCompliant(R-FST) /\ ContraResp(T-SND, arrow) /\ ContraResp(T-FST, arrow) /\ ContraResp(T-PAIR, arrow) /\ ContraResp(T-INT, arrow) /\ true /\ Inductive(T, int, []) /\ Inductive(T, times, [1; 2]) /\ Inductive(V, num, []) /\ Inductive(V, pair, []) /\ Inductive(C, fst, [1]) /\ Inductive(C, snd, [1]) /\ Inductive(C, num, []) /\ Inductive(C, pair, []) }
---- (CONSEQUENCE)
{ true } (G,I) { CtxCompliant(R-FST) }

Type T ::= (int) | (arrow T T)
Expression E ::= (num N) | (abs T (x)E) | (app E E) 
Value V ::= (num N) | (abs T (x)E) 
Context C ::= [] | (app C E) | (app V C).

[T-INT] 
Gamma |- (num N) : (int).

[T-ABS] 
Gamma |- (abs T1 (x)E) : (arrow T1 T2) <== Gamma, x : T1 |- E : T2.

[T-APP]
Gamma |- (app E1 E2) : T2 <== Gamma |- E1 : (arrow T1 T2) /\ Gamma |- E2 : T3 /\ T3 <: T1.

[BETA]
(app (abs T (x)E) V), S --> E[V/x], S <== value V.

